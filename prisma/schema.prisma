generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  password          String?
  emailVerified     DateTime?
  image             String?
  dateOfBirth       DateTime?
  anniversaryDate   DateTime?
  profilePicture    String?
  apiKey            String             @default("key123")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  accounts          Account[]
  sessions          Session[]
  customMemberships CustomMembership[]
  notifications     Notification[]
  usedBenefits      UsedBenefit[]
  memberships       UserMembership[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Brand {
  id               String             @id @default(cuid())
  name             String
  logoUrl          String
  website          String
  description      String?
  category         String
  actionUrl        String?
  actionType       String?
  actionLabel      String?
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  benefits         Benefit[]
  partnershipsTo   BrandPartnership[] @relation("BrandB")
  partnershipsFrom BrandPartnership[] @relation("BrandA")
  memberships      UserMembership[]

  @@map("brands")
}

model BrandPartnership {
  id        String   @id @default(cuid())
  brandAId  String
  brandBId  String
  createdAt DateTime @default(now())
  brandB    Brand    @relation("BrandB", fields: [brandBId], references: [id], onDelete: Cascade)
  brandA    Brand    @relation("BrandA", fields: [brandAId], references: [id], onDelete: Cascade)

  @@unique([brandAId, brandBId])
  @@map("brand_partnerships")
}

model Benefit {
  id                 String         @id @default(cuid())
  brandId            String
  title              String
  description        String
  termsAndConditions String?
  redemptionMethod   String
  promoCode          String?
  url                String?
  validityType       String
  validityDuration   Int?
  isFree             Boolean        @default(true)
  isActive           Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @default(now()) @updatedAt
  brand              Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade)
  notifications      Notification[]
  usedBenefits       UsedBenefit[]

  @@map("benefits")
}

model UserMembership {
  id                 String            @id @default(cuid())
  userId             String
  brandId            String?
  isActive           Boolean           @default(true)
  joinedAt           DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt
  customMembershipId String?
  customMembership   CustomMembership? @relation(fields: [customMembershipId], references: [id], onDelete: Cascade)
  brand              Brand?            @relation(fields: [brandId], references: [id], onDelete: Cascade)
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, brandId])
  @@unique([userId, customMembershipId])
  @@map("user_memberships")
}

model CustomMembership {
  id          String           @id @default(cuid())
  userId      String
  name        String
  description String
  category    String
  icon        String           @default("/images/brands/restaurant.svg")
  type        String           @default("free")
  cost        String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt
  benefits    CustomBenefit[]
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  memberships UserMembership[]

  @@map("custom_memberships")
}

model CustomBenefit {
  id                 String           @id @default(cuid())
  customMembershipId String
  title              String
  description        String
  termsAndConditions String?
  redemptionMethod   String
  promoCode          String?
  url                String?
  validityType       String
  validityDuration   Int?
  isFree             Boolean          @default(true)
  isActive           Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now()) @updatedAt
  customMembership   CustomMembership @relation(fields: [customMembershipId], references: [id], onDelete: Cascade)

  @@map("custom_benefits")
}

model Notification {
  id           String    @id @default(cuid())
  userId       String
  benefitId    String?
  type         String
  title        String
  message      String
  isRead       Boolean   @default(false)
  scheduledFor DateTime?
  sentAt       DateTime?
  createdAt    DateTime  @default(now())
  benefit      Benefit?  @relation(fields: [benefitId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model UsedBenefit {
  id        String   @id @default(cuid())
  userId    String
  benefitId String
  usedAt    DateTime @default(now())
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  benefit   Benefit  @relation(fields: [benefitId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, benefitId])
  @@map("used_benefits")
}
